;;
;; Header files for Tournament
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_int_eq_nullable_one
int __tact_int_eq_nullable_one(int a, int b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; __tact_int_to_string
slice __tact_int_to_string(int src) inline_ref;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $VictoryRequest$_store
builder $VictoryRequest$_store(builder build_0, (slice) v) inline;

;; $VictoryRequest$_store_cell
cell $VictoryRequest$_store_cell((slice) v) inline;

;; $CreateTournamentRequest$_load
(slice, ((int, int))) $CreateTournamentRequest$_load(slice sc_0) inline;

;; $JoinTournamentRequest$_load
(slice, (tuple)) $JoinTournamentRequest$_load(slice sc_0) inline;

;; $StartTournamentRequest$_load
(slice, (tuple)) $StartTournamentRequest$_load(slice sc_0) inline;

;; $FinishTournamentRequest$_load
(slice, ((slice))) $FinishTournamentRequest$_load(slice sc_0) inline;

;; $Tournament$_store
builder $Tournament$_store(builder build_0, (slice, int, int, slice, cell, int, int, cell, int, int, int) v) inline;

;; $Tournament$_load
(slice, ((slice, int, int, slice, cell, int, int, cell, int, int, int))) $Tournament$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Player$init$_store
builder $Player$init$_store(builder build_0, (slice) v) inline;

;; $Tournament$init$_load
(slice, ((int))) $Tournament$init$_load(slice sc_0) inline;

;; $Tournament$_contract_init
(slice, int, int, slice, cell, int, int, cell, int, int, int) $Tournament$_contract_init(int $seqno) impure inline_ref;

;; $Tournament$_contract_load
(slice, int, int, slice, cell, int, int, cell, int, int, int) $Tournament$_contract_load() impure inline_ref;

;; $Tournament$_contract_store
() $Tournament$_contract_store((slice, int, int, slice, cell, int, int, cell, int, int, int) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Player$_init_child
(cell, cell) $Player$_init_child(cell sys', slice $owner) inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $Tournament$_fun_seqno
((slice, int, int, slice, cell, int, int, cell, int, int, int), int) $Tournament$_fun_seqno((slice, int, int, slice, cell, int, int, cell, int, int, int) $self) impure inline_ref;

;; $Tournament$_fun_prizePool
((slice, int, int, slice, cell, int, int, cell, int, int, int), int) $Tournament$_fun_prizePool((slice, int, int, slice, cell, int, int, cell, int, int, int) $self) impure inline_ref;

;; $Tournament$_fun_participants
((slice, int, int, slice, cell, int, int, cell, int, int, int), cell) $Tournament$_fun_participants((slice, int, int, slice, cell, int, int, cell, int, int, int) $self) impure inline_ref;

;; $Tournament$_fun_participantCount
((slice, int, int, slice, cell, int, int, cell, int, int, int), int) $Tournament$_fun_participantCount((slice, int, int, slice, cell, int, int, cell, int, int, int) $self) impure inline_ref;

;; $Tournament$_fun_maxParticipantCount
((slice, int, int, slice, cell, int, int, cell, int, int, int), int) $Tournament$_fun_maxParticipantCount((slice, int, int, slice, cell, int, int, cell, int, int, int) $self) impure inline_ref;

;; $Tournament$_fun_requireOwner
((slice, int, int, slice, cell, int, int, cell, int, int, int), ()) $Tournament$_fun_requireOwner((slice, int, int, slice, cell, int, int, cell, int, int, int) $self) impure inline_ref;

;; $Tournament$_fun_sponsorFunds
((slice, int, int, slice, cell, int, int, cell, int, int, int), cell) $Tournament$_fun_sponsorFunds((slice, int, int, slice, cell, int, int, cell, int, int, int) $self) impure inline_ref;

;; $Tournament$_fun_sponsorFundsAmount
((slice, int, int, slice, cell, int, int, cell, int, int, int), int) $Tournament$_fun_sponsorFundsAmount((slice, int, int, slice, cell, int, int, cell, int, int, int) $self) impure inline_ref;

;; $Tournament$_fun_isFinished
((slice, int, int, slice, cell, int, int, cell, int, int, int), int) $Tournament$_fun_isFinished((slice, int, int, slice, cell, int, int, cell, int, int, int) $self) impure inline_ref;

;; $Tournament$_fun_isStarted
((slice, int, int, slice, cell, int, int, cell, int, int, int), int) $Tournament$_fun_isStarted((slice, int, int, slice, cell, int, int, cell, int, int, int) $self) impure inline_ref;

;; $Tournament$_fun_forward
((slice, int, int, slice, cell, int, int, cell, int, int, int), ()) $Tournament$_fun_forward((slice, int, int, slice, cell, int, int, cell, int, int, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Tournament$_fun_notify
((slice, int, int, slice, cell, int, int, cell, int, int, int), ()) $Tournament$_fun_notify((slice, int, int, slice, cell, int, int, cell, int, int, int) $self, cell $body) impure inline;

;; $Tournament$_fun_owner
((slice, int, int, slice, cell, int, int, cell, int, int, int), slice) $Tournament$_fun_owner((slice, int, int, slice, cell, int, int, cell, int, int, int) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value(slice to, int value) inline;

;; $SendParameters$_constructor_to_body_value_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_body_value_code_data(slice to, cell body, int value, cell code, cell data) inline;

;; $VictoryRequest$_constructor_player
((slice)) $VictoryRequest$_constructor_player(slice player) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
