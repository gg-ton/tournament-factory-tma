#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_Match.headers.fc";
#include "tact_Match.stdlib.fc";
#include "tact_Match.storage.fc";

;;
;; Contract Match functions
;;

(int, (slice, slice)) $Match$_contract_init(int $tournamentSeqno, (slice, slice) $gameInfo) impure inline_ref {
    var (($gameInfo'name, $gameInfo'genre)) = $gameInfo;
    var (($self'tournamentSeqno, ($self'gameInfo'name, $self'gameInfo'genre))) = (null(), null());
    $self'tournamentSeqno = $tournamentSeqno;
    ($self'gameInfo'name, $self'gameInfo'genre) = $GameInfo$_constructor_name_genre($gameInfo'name, $gameInfo'genre);
    return ($self'tournamentSeqno, ($self'gameInfo'name, $self'gameInfo'genre));
}

;;
;; Receivers of a Contract Match
;;

(((int, (slice, slice))), ()) %$Match$_internal_empty((int, (slice, slice)) $self) impure inline {
    var ($self'tournamentSeqno, ($self'gameInfo'name, $self'gameInfo'genre)) = $self;
    return (($self'tournamentSeqno, ($self'gameInfo'name, $self'gameInfo'genre)), ());
}

(((int, (slice, slice))), ()) $Match$_internal_binary_Deploy((int, (slice, slice)) $self, (int) $deploy) impure inline {
    var ($self'tournamentSeqno, ($self'gameInfo'name, $self'gameInfo'genre)) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'tournamentSeqno, ($self'gameInfo'name, $self'gameInfo'genre))~$Match$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'tournamentSeqno, ($self'gameInfo'name, $self'gameInfo'genre)), ());
}

;;
;; Get methods of a Contract Match
;;

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmQxT82FjuJcwH3P8Gypoy1AFTneb43gr5AzSBB5QUKTAN";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Match
;;

((int, (slice, slice)), int) $Match$_contract_router_internal((int, (slice, slice)) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$Match$_internal_empty();
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Match$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Match$_contract_load();
    
    ;; Handle operation
    int handled = self~$Match$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Match$_contract_store(self);
}
